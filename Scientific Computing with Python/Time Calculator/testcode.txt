def add_time(start, duration, day=None):
    # Parse the start time
    start_time, period = start.split()
    start_hour, start_minute = map(int, start_time.split(':'))
    start_hour = start_hour % 12  # Convert to 12-hour format

    # Parse the duration time
    duration_hour, duration_minute = map(int, duration.split(':'))

    # Calculate the new time
    new_hour = start_hour + duration_hour
    new_minute = start_minute + duration_minute

    # Adjust the new time for minutes exceeding 60
    if new_minute >= 60:
        new_hour += new_minute // 60
        new_minute = new_minute % 60

    # Calculate the number of days later
    days_later = new_hour // 12

    # Calculate the new period (AM or PM)
    new_period = period
    if new_hour >= 12:
        new_hour = new_hour % 12
        if period == 'AM':
            new_period = 'PM'
        else:
            new_period = 'AM'
            days_later += 1

    # Calculate the new day of the week if provided
    if day is not None:
        day = day.capitalize()
        days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
        current_day_index = days.index(day)
        new_day_index = (current_day_index + days_later) % 7
        new_day = days[new_day_index]
        new_time = f"{new_hour}:{new_minute:02d} {new_period}, {new_day}"
    else:
        new_time = f"{new_hour}:{new_minute:02d} {new_period}"

    # Handle the number of days later in the output
    if days_later == 1:
        new_time += " (next day)"
    elif days_later > 1:
        new_time += f" ({days_later} days later)"

    return new_time
