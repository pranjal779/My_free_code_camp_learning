{##}
Course: Python for Everybody
Exploring Data Using Python 3
Charles R. Severance
{##}

Mnemonic Variable Name -Python

string conversion

User input

onverting User Input 16:18

Conditional Execution
	comparsion IF

	One-Way Decisions (3:50)

	Indentation

	Tabs (5:41)

	9:32

	Nested Decisions (10:29)

	Two-way Decisions (11:05)

Conditional Execution B
	Multi-way

	The try / execpt Structure

functions

	stored and reused steps

	python Functions

	new reserved words

	max functions

	Type Conversions

	String Conversions

what is the purpose of the def keyword in python?
It indicates the start of a function, and the following indented section of code is to be stored for later.

Return Values

	Building our Own Functions

	define a function + invoke a function + reuse it

	Arguments

	Parameters

	Return Values (Return Statement)
	
	Arguments, Parameters and Results

	Multiple Parameter / Arguments

Loops and Iteration - Chapter 5 

	....
	Finishing an Iteration with continue

	
	indefinite loops

Definite loops

	Definite loop with strings

Iterations: Loop Idioms

chapter 6: strings

..
..

String Comparison	


Files as a Sequence

ch 8 Python Lists:
	Looking Inside Lists
	lists are mutable
	len()
	range()
	
Working with lists:
	List Methods
	is something in the list (in {or} not in)
	list are in orders - sort()
	Built-in Functions and lists
		-len()
		-max()
		-min()
		-sum()
		-sum(nums)/len(nums)

strings and Lists:

	----
	What does n equal in this code?

	words = 'His e-mail is q-lar@freecodecamp.org'
	pieces = words.split()
	parts = pieces[3].split('-')
	n = parts[1]

	mail


	q


	lar


	lar@freecodecamp.org
	----

	split()
	
	

	The .startswith function used in chapter 8C works better than the != 	to prevent the traceback. you can put the compound conditional in any order with .startswith and it will work.

	rawfile=open('mbox-short.txt')
	for iteration in rawfile:
	    iteration=iteration.rstrip()
	    split=iteration.split()
	    if not iteration.startswith("From") or len(split)<3:
	        continue
	    print(split[2])


How to debug or bug testing while coding check the ex8-1 ... .py files for context


___

Python Dictionaries

Dictionaries: Common Applications
	
	Histograms
	Dictinories
	

	Q)	What will the following code print?

	counts = { 'quincy' : 1 , 'mrugesh' : 42, 'beau': 100, '0': 10}
	print(counts.get('kris', 0))

	1)	2
	

	2)	quincy


	3)	0


	4)	10


	5)	[will return error]



----

Dictionaries and Loops

Ch 10 Tuples

	**return Tuple as function


Comparing and Sorting Tuples


**loop idioms for making a histogram
for line in fhand:
    words = line.split()
    for word in words:
        counts[word] = counts.get(word, 0 ) + 1

{##}extract from his book:

9.3 Looping and dictionaries
If you use a dictionary as the sequence in a for statement, it traverses the keys of
the dictionary. This loop prints each key and the corresponding value:
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for key in counts:
    print(key, counts[key])

Here’s what the output looks like:
jan 100
chuck 1
annie 42

Again, the keys are in no particular order.
We can use this pattern to implement the various loop idioms that we have described earlier. For example if we wanted to find all the entries in a dictionary
with a value above ten, we could write the following code:

counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for key in counts:
    if counts[key] > 10 :
	print(key, counts[key])

The for loop iterates through the keys of the dictionary, so we must use the index
operator to retrieve the corresponding value for each key. Here’s what the output
looks like:
jan 100
annie 42

We see only the entries with a value above 10.
If you want to print the keys in alphabetical order, you first make a list of the keys
in the dictionary using the keys method available in dictionary objects, and then
sort that list and loop through the sorted list, looking up each key and printing out key-value pairs in sorted order as follows:

counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
lst = list(counts.keys())
print(lst)
lst.sort()
for key in lst:
    print(key, counts[key])


Here’s what the output looks like:
['jan', 'chuck', 'annie']
annie 42
chuck 1
jan 100

First you see the list of keys in unsorted order that we get from the keys method.
Then we see the key-value pairs in order from the for loop.

{##}


Regular Expressions
ch11

Greedy matching


{##}

